{"version":3,"file":"index.mjs","sources":["../src/axis.ts","../src/label.ts","../src/labels.ts","../src/graduations.ts","../src/container.ts","../src/axes.ts"],"sourcesContent":["import { Vector2 } from 'three'\n\nexport interface AxisParameters {\n  size: number\n  labels: (number | string)[]\n  decimals?: number\n  prefix: string\n  suffix: string\n  graduations: number\n  root: boolean\n  relative: boolean\n  lineWidth: number\n  progress: number\n  margin: number\n  padding: number\n  distance: number\n}\n\nexport interface AxisGenerateParameters {\n  targetDensity: number\n  minimumDelta: number\n  rounding: number\n  avoidPrime: boolean\n  includeZero: boolean\n  autoRelative: boolean\n  symmetric: boolean\n  minimumOffset: number\n  maximumOffset: number\n}\n\nexport class Axis implements AxisParameters {\n  private _relative!: boolean\n  private _labels!: (number | string)[]\n  public orientation: Vector2\n  public spacing: Vector2\n  public size: number\n  public decimals?: number\n  public prefix: string\n  public suffix: string\n  public graduations: number\n  public root: boolean\n  public lineWidth: number\n  public progress: number\n  public margin: number\n  public padding: number\n  public distance: number\n  public rootPosition!: number\n  public startOffset: number = 0\n  public endOffset: number = 0\n\n  public constructor({\n    orientation,\n    spacing,\n    size = 10,\n    labels = [],\n    prefix = '',\n    suffix = '',\n    decimals = undefined,\n    graduations = 1,\n    root = false,\n    relative = false,\n    lineWidth = 0.02,\n    progress = 1,\n    margin = 0.2,\n    padding = 0,\n    distance = 0\n  }: Partial<AxisParameters> & {\n    orientation: Vector2\n    spacing: Vector2\n  }) {\n    this.orientation = orientation\n    this.spacing = spacing\n    this.size = size\n    this._labels = labels\n    this.prefix = prefix\n    this.suffix = suffix\n    this.decimals = decimals\n    this.graduations = graduations\n    this.root = root\n    this.relative = relative\n    this.lineWidth = lineWidth\n    this.progress = progress\n    this.margin = margin\n    this.padding = padding\n    this.distance = distance\n  }\n\n  private isPrime(number: number): boolean {\n    for (var i = 2, s = Math.sqrt(number); i <= s; i++) {\n      if (number % i === 0) return false\n    }\n\n    return number > 1\n  }\n\n  private adjustDelta(\n    delta: number,\n    minimumDelta: number,\n    range: number,\n    targetDensity: number\n  ): number {\n    const halfRange = range / 2\n    delta = Math.max(minimumDelta, delta)\n    delta *= range / delta / targetDensity\n    return delta >= halfRange ? halfRange : delta\n  }\n\n  private updateRootPosition(): void {\n    if (!this.relative) {\n      this.rootPosition = 0\n    } else if (!this.labels.length) {\n      this.rootPosition = 0.5\n    } else {\n      const index = this.labels.findIndex(label => (\n        parseFloat(label as string) === 0\n      ))\n\n      this.rootPosition = index === -1\n        ? 0\n        : index / (this.labels.length - 1)\n    }\n  }\n\n  public get labels(): (number | string)[] {\n    return this._labels\n  }\n\n  public set labels(labels: (number | string)[]) {\n    this._labels = labels\n    this.updateRootPosition()\n  }\n\n  public get relative(): boolean {\n    return this._relative\n  }\n\n  public set relative(relative: boolean) {\n    this._relative = relative\n    this.updateRootPosition()\n  }\n\n  public generate(values: number[], {\n    targetDensity = 4,\n    minimumDelta = 1,\n    rounding = 2,\n    avoidPrime = true,\n    includeZero = false,\n    autoRelative = true,\n    minimumOffset = 0,\n    maximumOffset = 0,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    symmetric = false // TODO\n  }: Partial<AxisGenerateParameters> = {}): void {\n    this.reset()\n\n    let minimum = Infinity\n    let maximum = -Infinity\n    let baseDelta = Infinity\n    let startOffset = 0\n    let endOffset = 0\n    let round = (value: number): number => value\n\n    values.forEach((value) => {\n      if (value < minimum) minimum = value\n      if (value > maximum) maximum = value\n\n      values.forEach((otherValue) => {\n        const valueDelta = Math.abs(value - otherValue)\n        if (valueDelta && valueDelta < baseDelta) baseDelta = valueDelta\n      })\n    })\n\n    minimum -= minimumOffset\n    maximum += maximumOffset\n\n    let range = maximum - minimum\n    let delta = this.adjustDelta(\n      baseDelta,\n      minimumDelta,\n      range,\n      targetDensity\n    )\n\n    if (autoRelative) this.relative = minimum < 0 && maximum > 0\n\n    if (rounding !== undefined) {\n      const roundingFactor = Math.pow(10, rounding)\n      round = (value: number) => Math.round(\n        value * roundingFactor\n      ) / roundingFactor\n\n      let shiftedMinimum = ~~(\n        minimum * roundingFactor\n      ) / roundingFactor\n\n      shiftedMinimum !== minimum && minimum--\n      startOffset += minimum - shiftedMinimum\n      minimum = shiftedMinimum\n      range += startOffset\n      delta = round(this.adjustDelta(\n        baseDelta,\n        minimumDelta,\n        range,\n        targetDensity\n      ))\n    }\n\n    const baseAmount = range / delta + 1\n    let amount = Math.ceil(baseAmount)\n\n    if (avoidPrime) {\n      while (this.isPrime(amount + 1)) amount++\n    }\n\n    endOffset = (amount - baseAmount) * delta || 0\n    maximum += endOffset\n    range += endOffset\n\n    if (includeZero || (autoRelative && this.relative)) {\n      let relativeOffset = Infinity\n\n      for (var i = 0; relativeOffset && i < amount; i++) {\n        const value = minimum + i * delta\n        if (Math.abs(value) < Math.abs(relativeOffset)) relativeOffset = value\n      }\n\n      if (relativeOffset < 0) relativeOffset += delta\n\n      minimum -= relativeOffset\n      startOffset += relativeOffset\n      range += relativeOffset\n      delta = round(this.adjustDelta(\n        baseDelta,\n        minimumDelta,\n        range,\n        targetDensity\n      ))\n    }\n\n    const labels: number[] = []\n\n    for (var i = 0; i < amount; i++) {\n      labels.push(round(minimum + i * delta))\n    }\n\n    this.startOffset = startOffset / range\n    this.endOffset = endOffset / range\n    this.labels = labels\n  }\n\n  public reset(): void {\n    this.startOffset = this.endOffset = 0\n    this.labels.splice(0)\n    this.root = false\n    this.relative = false\n  }\n}\n","import { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer'\nimport { Axis } from '~/axis'\n\nexport class Label extends CSS3DObject {\n  private readonly wrapper: HTMLDivElement = document.createElement('div')\n  private readonly content: HTMLDivElement = document.createElement('div')\n\n  public constructor() {\n    super(document.createElement('div'))\n    this.wrapper.appendChild(this.content)\n    this.element.appendChild(this.wrapper)\n  }\n\n  public get style(): CSSStyleDeclaration {\n    return this.wrapper.style\n  }\n\n  public generate(axis: Axis, value: number | string): void {\n    const rounding = (\n      axis.decimals !== undefined &&\n      Math.pow(10, axis.decimals)\n    ) as number\n\n    this.content.textContent = `${axis.prefix}${\n      rounding ? Math.round((value as number) * rounding) / rounding : value\n    }${axis.suffix}`\n  }\n\n  public resize(\n    axis: Axis,\n    opposite: Axis,\n    position: number,\n    renderingScale: number = 10\n  ): void {\n    const oppositeRelative = !!opposite.rootPosition as unknown as number\n    const rootPosition = (opposite.rootPosition - 0.5) * opposite.size\n    position = (position / (axis.labels.length - 1) - 0.5) * axis.size\n\n    const spacingX = axis.spacing.x * (\n      (oppositeRelative || !axis.orientation.x) as unknown as number\n    )\n\n    const spacingY = axis.spacing.y * (\n      (oppositeRelative || !axis.orientation.y) as unknown as number\n    )\n\n    this.content.style.transform = `translate(${\n      50 * spacingX\n    }%, ${\n      -50 * spacingY\n    }%)`\n\n    this.position\n      .setX(renderingScale * (\n        axis.orientation.x * position +\n        axis.orientation.y * rootPosition +\n        axis.margin * spacingX -\n        axis.padding * axis.orientation.y * (1 - oppositeRelative)\n      ))\n      .setY(renderingScale * (\n        axis.orientation.y * position +\n        axis.orientation.x * rootPosition +\n        axis.margin * spacingY -\n        axis.padding * axis.orientation.x * (1 - oppositeRelative)\n      ))\n      .setZ(axis.distance * renderingScale)\n  }\n}\n","import { Object3D, Camera, Scene, Matrix4 } from 'three'\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer'\nimport { Axis } from '~/axis'\nimport { Label } from '~/label'\n\nexport interface LabelsParameters {\n  opacity: number\n  color: string\n  fontSize: number\n  fontFamily: string\n  faceCamera: boolean\n  renderingScale: number\n}\n\nexport class Labels extends Object3D implements LabelsParameters {\n  private readonly css3DRenderer = new CSS3DRenderer()\n  private readonly originalMatrix = new Matrix4()\n  private _faceCamera!: boolean\n  public readonly style = this.css3DRenderer.domElement.style\n  public fontSize: number\n  public renderingScale: number\n\n  public constructor({\n    opacity = 1,\n    color = '#ffffff',\n    fontSize = 0.3,\n    fontFamily = 'sans-serif',\n    faceCamera = false,\n    renderingScale = 100,\n  }: Partial<LabelsParameters> = {}) {\n    super()\n\n    this.opacity = opacity\n    this.color = color\n    this.fontSize = fontSize\n    this.fontFamily = fontFamily\n    this.faceCamera = faceCamera\n    this.renderingScale = renderingScale\n    this.matrixAutoUpdate = false\n\n    this.style.position = 'absolute'\n    this.style.pointerEvents = 'none'\n    this.style.top =\n    this.style.left = '0'\n    this.style.zIndex = '2'\n\n    document.body.appendChild(this.css3DRenderer.domElement)\n  }\n\n  private iterate(x: Axis, y: Axis, callback: (\n    axis: Axis,\n    opposite: Axis,\n    index: number,\n    position: number,\n    value: number | string\n  ) => void): number {\n    return [x, y].reduce((index, axis, axisIndex, axes) => {\n      return axis.labels.reduce((index: number, value, position) => {\n        callback(\n          axis,\n          axes[(axisIndex + 1) % axes.length],\n          index,\n          position,\n          value\n        )\n\n        return index + 1\n      }, index)\n    }, 0)\n  }\n\n  private scaleFont(): void {\n    this.style.fontSize = `${this.fontSize * this.renderingScale}px`\n  }\n\n  public get opacity(): number {\n    return parseFloat(this.style.opacity!)\n  }\n\n  public set opacity(opacity: number) {\n    this.style.opacity = opacity as unknown as string\n  }\n\n  public get color(): string {\n    return this.style.color!\n  }\n\n  public set color(color: string) {\n    this.style.color = color\n  }\n\n  public get fontFamily(): string {\n    return this.style.fontFamily!\n  }\n\n  public set fontFamily(fontFamily: string) {\n    this.style.fontFamily = fontFamily\n  }\n\n  public get faceCamera(): boolean {\n    return this._faceCamera\n  }\n\n  public set faceCamera(faceCamera: boolean) {\n    this._faceCamera = faceCamera\n    faceCamera || this.children.forEach(label => label.rotation.set(0, 0, 0))\n  }\n\n  public get visible(): boolean {\n    return this.style ? this.style.display !== 'none' : true\n  }\n\n  public set visible(visible: boolean) {\n    if (this.style) this.style.visibility = visible ? null : 'none'\n  }\n\n  public setRendererSize(width: number, height: number): void {\n    this.css3DRenderer.setSize(width, height)\n  }\n\n  public render(camera: Camera): void {\n    const parent = this.parent\n    const xCamera = camera.position.x\n    const yCamera = camera.position.y\n    const zCamera = camera.position.z\n\n    this.originalMatrix.copy(this.matrix)\n    this.parent = null\n\n    camera.position.multiplyScalar(this.renderingScale)\n\n    this.updateWorldMatrix(true, false)\n    parent!.updateWorldMatrix(true, false)\n    this.applyMatrix(parent!.matrixWorld)\n    this.updateWorldMatrix(false, false)\n\n    this.faceCamera && this.children.forEach(label => {\n      label.lookAt(camera.position)\n    })\n\n    this.position.multiplyScalar(this.renderingScale)\n    this.updateMatrix()\n    this.updateMatrixWorld(true)\n\n    this.css3DRenderer.render(this as unknown as Scene, camera)\n\n    camera.position.set(xCamera, yCamera, zCamera)\n\n    this.parent = parent\n    this.matrix.copy(this.originalMatrix)\n    this.matrix.decompose(this.position, this.quaternion, this.scale)\n  }\n\n  public generate(x: Axis, y: Axis): void {\n    this.scaleFont()\n\n    this.children\n      .slice(this.iterate(x, y, (axis, opposite, index, position, value) => {\n        let label = this.children[index] as Label\n        label || this.add(label = new Label())\n        label.generate(axis, value)\n        label.resize(axis, opposite, position, this.renderingScale)\n      }))\n      .forEach(label => this.remove(label))\n  }\n\n  public resize(x: Axis, y: Axis): void {\n    this.scaleFont()\n\n    this.iterate(x, y, (axis, opposite, index, position) => {\n      const label = this.children[index] as Label\n      label && label.resize(axis, opposite, position, this.renderingScale)\n    })\n  }\n}\n","import { BufferGeometry, BufferAttribute } from 'three'\nimport { Axis } from '~/axis'\n\nexport class Graduations extends BufferGeometry {\n  private graduations: number[] = []\n\n  public generate(x: Axis, y: Axis): void {\n    const indicesLength = 6 * [x, y].reduce((sum, {\n      graduations,\n      root,\n      rootPosition,\n      labels\n    }, index) => {\n      const maximum = labels.length - 1\n\n      if (!graduations) {\n        graduations = 0 + (root as unknown as number)\n      } else if (labels.length) {\n        if (graduations < 1) {\n          rootPosition *= maximum\n          let step = Math.min(maximum, Math.round(1 / graduations))\n          while (maximum % step || rootPosition % step) step--\n          graduations = Math.ceil(labels.length / step)\n        } else {\n          graduations = Math.round(graduations) * maximum + 1\n        }\n      } else {\n        graduations = Math.round(graduations)\n      }\n\n      this.graduations[index] = graduations\n\n      return sum + graduations\n    }, 0)\n\n    const indices = new Uint16Array(indicesLength)\n    let index = 0\n\n    for (var i = 0; i < indicesLength; i += 6) {\n      indices[i    ] = indices[i + 3] = index\n      indices[i + 1] = indices[i + 5] = index + 2\n      indices[i + 2] = index + 1\n      indices[i + 4] = index + 3\n\n      index += 4\n    }\n\n    this.setIndex(new BufferAttribute(indices, 1))\n    this.setAttribute('position',\n      new BufferAttribute(new Float32Array(indicesLength * 2), 3)\n    )\n\n    this.resize(x, y)\n  }\n\n  public resize(x: Axis, y: Axis): void {\n    const positionAttribute = this.getAttribute('position') as BufferAttribute\n    const vertices = positionAttribute.array as Float32Array\n\n    const xGraduations = this.graduations[0]\n    const yGraduations = this.graduations[1]\n\n    const xHalfSize = x.size / 2\n    const yHalfSize = y.size / 2\n\n    const xFactor = x.size / Math.max(1, xGraduations - 1)\n    const yFactor = y.size / Math.max(1, yGraduations - 1)\n\n    const xHalfPaddedSize = xHalfSize + y.padding\n    const yHalfPaddedSize = yHalfSize + x.padding\n\n    const xHalfLineWidth = x.lineWidth / 2\n    const yHalfLineWidth = y.lineWidth / 2\n\n    const xHalfOuterSize = xHalfPaddedSize + xHalfLineWidth\n    const yHalfOuterSize = yHalfPaddedSize + yHalfLineWidth\n\n    const xRootPosition = xGraduations === 1 ? x.rootPosition * x.size : 0\n    const yRootPosition = yGraduations === 1 ? y.rootPosition * y.size : 0\n\n    const xProgress = x.progress * 2\n    const yProgress = y.progress * 2\n\n    let index = 0\n\n    for (var i = 0; i < xGraduations; i++) {\n      const position = i * xFactor - xHalfSize + xRootPosition\n\n      vertices[index     ] = vertices[index +  9] = position - xHalfLineWidth\n      vertices[index +  3] = vertices[index +  6] = position + xHalfLineWidth\n      vertices[index +  7] = vertices[index + 10] = -yHalfOuterSize\n      vertices[index +  1] = vertices[index +  4] = -yHalfOuterSize + (\n        yHalfOuterSize * xProgress\n      )\n\n      index += 12\n    }\n\n    for (var i = 0; i < yGraduations; i++) {\n      const position = i * yFactor - yHalfSize + yRootPosition\n\n      vertices[index + 7] = vertices[index + 10] = position - yHalfLineWidth\n      vertices[index + 1] = vertices[index +  4] = position + yHalfLineWidth\n      vertices[index    ] = vertices[index +  9] = -xHalfOuterSize\n      vertices[index + 3] = vertices[index +  6] = -xHalfOuterSize + (\n        xHalfOuterSize * yProgress\n      )\n\n      index += 12\n    }\n\n    positionAttribute.needsUpdate = true\n  }\n}\n","import { Box2, Vector2 } from 'three'\nimport { Axis } from '~/axis'\n\nexport class Container extends Box2 {\n  private readonly _size: Vector2 = new Vector2()\n\n  public constructor(points?: ({ x: number, y: number })[]) {\n    super()\n\n    if (points) {\n      const pointValues = points.map(({ x, y }, index) => {\n        const pointValue = {\n          x: parseFloat(x as unknown as string),\n          y: parseFloat(y as unknown as string)\n        }\n\n        if (isNaN(pointValue.x)) pointValue.x = index / (points.length - 1)\n        if (isNaN(pointValue.y)) pointValue.y = index / (points.length - 1)\n\n        return pointValue\n      })\n\n      this.setFromPoints(pointValues as Vector2[])\n    }\n  }\n\n  public get size(): Vector2 {\n    return this.getSize(this._size)\n  }\n\n  public normalizePoint(\n    point: { x: number, y: number },\n    target: Vector2 = new Vector2()\n  ): Vector2 {\n    return target\n      .subVectors(point as Vector2, this.min)\n      .divide(this.size)\n  }\n\n  public interpolatePoint(\n    point: { x: number, y: number },\n    container?: Container,\n    target: Vector2 = new Vector2()\n  ): Vector2 {\n    return (container ? container.normalizePoint(point, target) : target)\n      .multiply(this.size)\n      .add(this.min)\n  }\n\n  public interpolatePoints(\n    points: ({ x: number, y: number })[],\n    targets: Vector2[] = points.map(() => new Vector2())\n  ): Vector2[] {\n    const container = new Container(points)\n\n    points.some((point, index) => {\n      if (index >= targets.length) return true\n\n      const pointValue = {\n        x: parseFloat(point.x as unknown as string),\n        y: parseFloat(point.y as unknown as string)\n      }\n\n      if (isNaN(pointValue.x)) {\n        pointValue.x = index / (points.length - 1)\n      }\n\n      if (isNaN(pointValue.y)) {\n        pointValue.y = index / (points.length - 1)\n      }\n\n      this.interpolatePoint(pointValue, container, targets[index])\n    })\n\n    return targets\n  }\n\n  public resize(x: Axis, y: Axis): void {\n    const xHalfSize = x.size / 2\n    const yHalfSize = y.size / 2\n\n    this.min.set(\n      x.startOffset * x.size - xHalfSize,\n      y.startOffset * y.size - yHalfSize\n    )\n\n    this.max.set(\n      xHalfSize - x.endOffset * x.size,\n      yHalfSize - y.endOffset * y.size\n    )\n  }\n}\n","import { Mesh, MeshBasicMaterial, Color, Vector2 } from 'three'\nimport { Axis, AxisParameters, AxisGenerateParameters } from '~/axis'\nimport { Labels, LabelsParameters } from '~/labels'\nimport { Graduations } from '~/graduations'\nimport { Container } from '~/container'\n\nexport class Axes extends Mesh {\n  public x: Axis\n  public y: Axis\n  public labels: Labels\n  public graduations: Graduations\n  public container: Container = new Container()\n\n  public constructor({\n    x = {},\n    y = {},\n    labels = {},\n    opacity = 1,\n    color = 0xffffff,\n    generate = true\n  }: {\n    x?: Partial<AxisParameters>\n    y?: Partial<AxisParameters>\n    labels?: Partial<LabelsParameters>\n    opacity?: number\n    color?: Color | number | string\n    generate?: boolean\n  } = {}) {\n    super(new Graduations())\n\n    this.x = new Axis({ ...x,\n      orientation: new Vector2(1, 0),\n      spacing: new Vector2(1, -1)\n    })\n\n    this.y = new Axis({ ...y,\n      orientation: new Vector2(0, 1),\n      spacing: new Vector2(-1, 1)\n    })\n\n    this.graduations = this.geometry as Graduations\n    this.labels = new Labels(labels)\n    this.opacity = opacity\n    this.color.set(color as Color)\n\n    this.add(this.labels)\n\n    generate && this.generate()\n  }\n\n  public get visible(): boolean {\n    return this.labels.visible\n  }\n\n  public set visible(visible: boolean) {\n    if (this.labels) this.labels.visible = visible\n  }\n\n  public get color(): Color {\n    return (this.material as MeshBasicMaterial).color\n  }\n\n  public set color(color: Color) {\n    (this.material as MeshBasicMaterial).color = color\n  }\n\n  public get opacity(): number {\n    return (this.material as MeshBasicMaterial).opacity\n  }\n\n  public set opacity(opacity: number) {\n    (this.material as MeshBasicMaterial).transparent = opacity !== 1\n    ;(this.material as MeshBasicMaterial).opacity = opacity\n  }\n\n  public generate(\n    values?: ({ x: number | string, y: number | string })[],\n    { x = {}, y = {} }: {\n      x?: Partial<AxisGenerateParameters>\n      y?: Partial<AxisGenerateParameters>\n    } = {}\n  ): void {\n    if (values) {\n      const xLabels = values.map(({ x }) => x)\n      const yLabels = values.map(({ y }) => y)\n\n      const xValues = (xLabels as string[]).map(parseFloat)\n      const yValues = (yLabels as string[]).map(parseFloat)\n\n      if (xValues.includes(NaN)) this.x.labels = xLabels\n      else this.x.generate(xValues, x)\n\n      if (yValues.includes(NaN)) this.y.labels = yLabels\n      else this.y.generate(yValues, y)\n    }\n\n    this.generateGraduations()\n    this.generateLabels()\n  }\n\n  public resize(): void {\n    this.resizeGraduations()\n    this.resizeLabels()\n  }\n\n  public generateGraduations(): void {\n    this.graduations.generate(this.x, this.y)\n    this.container.resize(this.x, this.y)\n  }\n\n  public resizeGraduations(): void {\n    this.graduations.resize(this.x, this.y)\n    this.container.resize(this.x, this.y)\n  }\n\n  public generateLabels(): void {\n    this.labels.generate(this.x, this.y)\n  }\n\n  public resizeLabels(): void {\n    this.labels.resize(this.x, this.y)\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}